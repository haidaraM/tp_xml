tp xml

Partie 1 : 

1) Eléments manquants :
	- 	E-mail

Etape 2 : 

1.1)/child::texte/child::en-tete/child::info_traitements/child::mise_en_forme_par/child::unCreateur, FA : /texte/en-tete/info_traitements/mise_en_forme_par/unCreateur
1.2) /texte/corps/paragraphe[@type = "dialogue"]
1.3) /texte/corps/paragraphe/phrase[@langue = "francais"]
1.4) /texte/corps/paragraphe/phrase[2] OU //phrase[2]
1.5) on prend la 10ème de toutes les phrases : (//phrase)[10] ou encore /descendant::phrase[10]
1.6) //phrase[contains(., "mouton")]
1.7) distinct-values(//phrase/@modalite) OU (mieux ) //phrase[not (@modalite = preceding::phrase/@modalite )]/@modalite

//phrase[not (@modalite = preceding::phrase/@modalite )] : récupére les premières phrases ayant un attribut qui n'est pas encore enregistré
pour obtenir le nom des modalités : //phrase[not (@modalite = preceding::phrase/@modalite )]/@modalite
preceding est défini uniquement qu'au niveau des noeuds, pas sur les attributs



Partie 2 :
2.1) 
<phrases>{
for $p in //phrase[@langue="francais"]
order by $p
return $p
}</phrases>

2.2)
<phrases>{
for $p in //phrase[contains(.,"mouton")]
return $p
}</phrases> 

<phrases>{
for $p in //phrase
where $p[contains(.,"mouton")]
return $p
}</phrases> 

2.3)
<paragraphes>{
for $p in //paragraphe
return <paragraphe Type="{data($p/@type)}" phrases="{count($p/phrase)}"> 
{
  for $m in distinct-values($p/phrase/@modalite)
  return <modalite> {data($m)} </modalite>
}

{
  for $l in distinct-values($p/phrase/@locuteur)
  return <locteur> {data($l)} </locteur>
}
 </paragraphe>

}
</paragraphes> 

2.4)
<version_francaise>{
for $p in //paragraphe
return <paragraphe> {data($p/phrase[@langue="francais"])} </paragraphe>
}
</version_francaise> 

2.5) 
<version_francaise>{
for $p in //paragraphe
return <paragraphe> {data($p/phrase[@langue="francais" and position()=2])} </paragraphe>
}
</version_francaise> 

2.6)
<dialogue>{
for $p in //paragraphe[@type="dialogue"]/phrase[@langue="francais" and @locuteur="Narrateur"]
return <phrase>{data($p)}</phrase>
}
</dialogue> 

2.7)
let $c := //paragraphe/phrase[contains(.,"mouton") and @locuteur="LePetitPrince"]
return
<paragraphe nombre_phrases="{count($c)}">
{
for $p in $c
return  <phrase> {data($p)} </phrase>
}</paragraphe> 